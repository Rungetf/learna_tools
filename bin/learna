#!/usr/bin/env python

import argparse

from learna_tools.learna.design_rna import design_rna
from learna_tools.learna.data.parse_dot_brackets import parse_dot_brackets

from learna_tools.learna.agent import NetworkConfig, get_network, AgentConfig, get_agent_fn
from learna_tools.learna.environment import RnaDesignEnvironment, RnaDesignEnvironmentConfig



if __name__ == "__main__":
    import argparse
    from pathlib import Path
    from learna_tools.learna.data.parse_dot_brackets import parse_dot_brackets

    parser = argparse.ArgumentParser()

    # Data
    parser.add_argument(
        "--target_structure", type=Path, help="Path to sequence to run on"
    )
    parser.add_argument("--data_dir", default="data", help="Data directory")
    parser.add_argument("--dataset", type=Path, help="Available: eterna, rfam_taneda")
    parser.add_argument(
        "--target_structure_ids",
        default=None,
        required=False,
        type=int,
        nargs="+",
        help="List of target structure ids to run on",
    )


    # Timeout behaviour
    parser.add_argument("--timeout", default=None, type=int, help="Maximum time to run")

    # Hyperparameters
    parser.add_argument("--learning_rate", type=float, default=0.0005991629320464973, help="Learning rate to use")
    parser.add_argument(
        "--mutation_threshold", type=int, default=5, help="Enable MUTATION with set threshold"
    )
    parser.add_argument(
        "--reward_exponent", default=9.33503385734547, type=float, help="Exponent for reward shaping"
    )
    parser.add_argument(
        "--state_radius", default=32, type=int, help="Radius around current site"
    )
    parser.add_argument(
        "--conv_sizes", type=int, default=[17, 5], nargs="+", help="Size of conv kernels"
    )
    parser.add_argument(
        "--conv_channels", type=int, default=[7, 18], nargs="+", help="Channel size of conv"
    )
    parser.add_argument(
        "--num_fc_layers", type=int, default=1, help="Number of FC layers to use"
    )
    parser.add_argument(
        "--fc_units", type=int, default=57, help="Number of units to use per FC layer"
    )
    parser.add_argument(
        "--batch_size", type=int, default=126, help="Batch size for ppo agent"
    )
    parser.add_argument(
        "--entropy_regularization", type=float, default=6.762991409135427e-05, help="The output entropy"
    )
    parser.add_argument(
        "--restart_timeout", type=int, default=1800, help="Time after which to restart the agent"
    )
    parser.add_argument("--lstm_units", type=int, default=28, help="The number of lstm units")
    parser.add_argument("--num_lstm_layers", type=int, default=1, help="The number of lstm layers")
    parser.add_argument("--embedding_size", type=int, default=3, help="The size of the embedding")

    args = parser.parse_args()

    network_config = NetworkConfig(
        conv_sizes=args.conv_sizes,  # radius * 2 + 1
        conv_channels=args.conv_channels,
        num_fc_layers=args.num_fc_layers,
        fc_units=args.fc_units,
        lstm_units=args.lstm_units,
        num_lstm_layers=args.num_lstm_layers,
        embedding_size=args.embedding_size,
    )
    agent_config = AgentConfig(
        learning_rate=args.learning_rate,
        batch_size=args.batch_size,
        entropy_regularization=args.entropy_regularization,
        random_agent=False,
    )
    env_config = RnaDesignEnvironmentConfig(
        mutation_threshold=args.mutation_threshold,
        reward_exponent=args.reward_exponent,
        state_radius=args.state_radius,
    )
    dot_brackets = parse_dot_brackets(
        dataset=args.dataset,
        data_dir=args.data_dir,
        target_structure_ids=args.target_structure_ids,
        target_structure_path=args.target_structure,
    )

    design_rna(
        dot_brackets,
        timeout=args.timeout,
        restore_path=None,
        stop_learning=False,
        restart_timeout=args.restart_timeout,
        network_config=network_config,
        agent_config=agent_config,
        env_config=env_config,
    )
